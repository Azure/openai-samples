# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

import requests
from urllib.parse import urljoin
from botbuilder.core import ActivityHandler, TurnContext
from botbuilder.schema import ChannelAccount
from config import DefaultConfig


class MyBot(ActivityHandler):

    async def on_message_activity(self, turn_context: TurnContext):
        """
        Every time user sends a message to the bot, this method is called. 
        This method is just used as a pass-through to the orchestrator. 
        Response to the user's message is generated by the orchestrator using Azure Open AI and ChatGPT and returned to the user. 
        Conversation history and user details are maintained in the orchestrator, which is used as additional context for generating response from ChatGPT.
        """
        user_id = turn_context.activity.channel_data.get("user_id", None)
        if user_id is None:
            return await turn_context.send_activity(f'To make sure you get the most out of your experience, please select a user profile first. This will allow our Bot to use the user profile and its simple knowledge base (KB) with two topics (home insurance premium and flood insurance) to answer your questions on these topics, as well as questions related to other types of insurance.', speak="")
        
        url = urljoin(DefaultConfig.ORCHESTRATOR_BASE_URL, DefaultConfig.ORCHESTRATOR_QUERY_PATH)
        
        payload = { "query": turn_context.activity.text,
                    "user_id": user_id,
                    "conversation_id": turn_context.activity.conversation.id.replace("|livechat", "")+user_id
                }
        print(f'Sending payload to orchestrator: {payload}')

        try:
            response = requests.post(url, json=payload)
            if response.ok:
                response_json = response.json()
                await turn_context.send_activity(response_json["response"], speak="")
            else:
                await turn_context.send_activity(f'Failed to get response from backend service. Status code: {response.status_code}')
        except requests.exceptions.RequestException as re:
            await turn_context.send_activity(f'Error connecting to backend service.\nError: {re}', speak="")

    async def on_members_added_activity(
        self,
        members_added: ChannelAccount,
        turn_context: TurnContext
    ):
        """
        This method is invoked by Bot framework when a new user is added to the conversation. 
        At this point, the conversation history for that user is reset in the orchestrator.
        """

        for member_added in members_added:
            if member_added.id != turn_context.activity.recipient.id:
                await turn_context.send_activity("This Bot can answer questions about home and flood insurance using a knowledge base and user profile. By selecting a user profile first, you can start using the Bot and begin your experience.")
                
    async def on_event_activity(
            self,
            turn_context: TurnContext
    ):
        """
        This method is invoked by Bot framework when clear history button is pressed on the web page hosting the webchat control. 
        At this point, the conversation history for that user is reset in the orchestrator.
        """

        if turn_context.activity.name == 'webchat/clear_user':
            payload = {"user_id": turn_context.activity.value["user_id"],
                        "purpose": "user requested to clear conversation history"
                       }
            print("user_id:" + turn_context.activity.value["user_id"])
            await turn_context.send_activity("Hello "+ turn_context.activity.value["user_id"].capitalize() + ", how can I help you?")