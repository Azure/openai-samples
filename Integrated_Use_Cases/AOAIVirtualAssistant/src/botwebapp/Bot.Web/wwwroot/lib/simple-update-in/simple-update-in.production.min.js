!function (t, e) { "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = t || self).simpleUpdateIn = e() }(this, function () { "use strict"; function l(t) { return (l = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) { return typeof t } : function (t) { return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t })(t) } function c(t, e, r, n, o, a, i) { try { var u = t[a](i), c = u.value } catch (t) { return void r(t) } u.done ? e(c) : Promise.resolve(c).then(n, o) } function t(u) { return function () { var t = this, i = arguments; return new Promise(function (e, r) { var n = u.apply(t, i); function o(t) { c(n, e, r, o, a, "next", t) } function a(t) { c(n, e, r, o, a, "throw", t) } o(void 0) }) } } function p(t, e, r) { return e in t ? Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = r, t } function n(e, t) { var r, n = Object.keys(e); return Object.getOwnPropertySymbols && (r = Object.getOwnPropertySymbols(e), t && (r = r.filter(function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable })), n.push.apply(n, r)), n } function y(e) { for (var t = 1; t < arguments.length; t++) { var r = null != arguments[t] ? arguments[t] : {}; t % 2 ? n(Object(r), !0).forEach(function (t) { p(e, t, r[t]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach(function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t)) }) } return e } function b(t) { return function (t) { if (Array.isArray(t)) return t }(t) || e(t) || u(t) || function () { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function v(t) { return function (t) { if (Array.isArray(t)) return o(t) }(t) || e(t) || u(t) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function e(t) { if ("undefined" != typeof Symbol && Symbol.iterator in Object(t)) return Array.from(t) } function u(t, e) { if (t) { if ("string" == typeof t) return o(t, e); var r = Object.prototype.toString.call(t).slice(8, -1); return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? o(t, e) : void 0 } } function o(t, e) { (null == e || e > t.length) && (e = t.length); for (var r = 0, n = new Array(e); r < e; r++)n[r] = t[r]; return n } function f(t) { if ("undefined" == typeof Symbol || null == t[Symbol.iterator]) { if (Array.isArray(t) || (t = u(t))) { var e = 0, r = function () { }; return { s: r, n: function () { return e >= t.length ? { done: !0 } : { done: !1, value: t[e++] } }, e: function (t) { throw t }, f: r } } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") } var n, o, a = !0, i = !1; return { s: function () { n = t[Symbol.iterator]() }, n: function () { var t = n.next(); return a = t.done, t }, e: function (t) { i = !0, o = t }, f: function () { try { a || null == n.return || n.return() } finally { if (i) throw o } } } } var d = Object.is || function (t, e) { return t === e ? 0 !== t || 1 / t == 1 / e : t != t && e != e }; function r(t, e, r) { s(e); var n, o = f(function t(e, r) { if (!r.length) return; var n = b(r), o = n[0], a = n.slice(1); if ("function" == typeof o) { var i = []; if (Array.isArray(e)) for (var u = 0, c = e.length; u < c; u++)o.call(e, e[u], u) && i.push.apply(i, v(t(e, [u].concat(v(a))))); else for (var f in e || {}) o.call(e, e[f], f) && i.push.apply(i, v(t(e, [f].concat(v(a))))); return i } var s = t(void 0 !== e && e[o], a); return s ? s.map(function (t) { return [o].concat(v(t)) }) : [[o]] }(t, e)); try { for (o.s(); !(n = o.n()).done;) { var a = n.value; t = g(t, a, r ? r(x(t, a)) : void 0) } } catch (t) { o.e(t) } finally { o.f() } return t } function a() { return (a = t(regeneratorRuntime.mark(function t(e, r, n) { var o, a, i, u; return regeneratorRuntime.wrap(function (t) { for (; ;)switch (t.prev = t.next) { case 0: return s(r), t.next = 3, h(e, r); case 3: o = t.sent, a = f(o), t.prev = 5, a.s(); case 7: if ((i = a.n()).done) { t.next = 23; break } if (u = i.value, t.t0 = g, t.t1 = e, t.t2 = u, n) return t.next = 15, n(x(e, u)); t.next = 18; break; case 15: t.t3 = t.sent, t.next = 19; break; case 18: t.t3 = void 0; case 19: t.t4 = t.t3, e = (0, t.t0)(t.t1, t.t2, t.t4); case 21: t.next = 7; break; case 23: t.next = 28; break; case 25: t.prev = 25, t.t5 = t.catch(5), a.e(t.t5); case 28: return t.prev = 28, a.f(), t.finish(28); case 31: return t.abrupt("return", e); case 32: case "end": return t.stop() } }, t, null, [[5, 25, 28, 31]]) }))).apply(this, arguments) } function s(t) { if (!Array.isArray(t)) throw new Error("path must be an array") } r.updateInAsync = function (t, e, r) { return a.apply(this, arguments) }; var m = ["__proto__", "constructor", "prototype"]; function h() { return i.apply(this, arguments) } function i() { return (i = t(regeneratorRuntime.mark(function t(e, r) { var n, o, a, i, u, c, f, s; return regeneratorRuntime.wrap(function (t) { for (; ;)switch (t.prev = t.next) { case 0: if (r.length) { t.next = 2; break } return t.abrupt("return"); case 2: if (n = b(r), o = n[0], a = n.slice(1), "function" != typeof o) { t.next = 43; break } if (i = [], !Array.isArray(e)) { t.next = 25; break } u = 0, c = e.length; case 7: if (u < c) return t.next = 10, o.call(e, e[u], u); t.next = 23; break; case 10: if (t.t0 = t.sent, t.t0) return t.t1 = i.push, t.t2 = i, t.t3 = v, t.next = 17, h(e, [u].concat(v(a))); t.next = 20; break; case 17: t.t4 = t.sent, t.t5 = (0, t.t3)(t.t4), t.t1.apply.call(t.t1, t.t2, t.t5); case 20: u++, t.next = 7; break; case 23: t.next = 42; break; case 25: t.t6 = regeneratorRuntime.keys(e || {}); case 26: if ((t.t7 = t.t6()).done) { t.next = 42; break } return f = t.t7.value, t.next = 30, o.call(e, e[f], f); case 30: if (t.t8 = t.sent, t.t8) return t.t9 = i.push, t.t10 = i, t.t11 = v, t.next = 37, h(e, [f].concat(v(a))); t.next = 40; break; case 37: t.t12 = t.sent, t.t13 = (0, t.t11)(t.t12), t.t9.apply.call(t.t9, t.t10, t.t13); case 40: t.next = 26; break; case 42: return t.abrupt("return", i); case 43: return t.next = 45, h(void 0 !== e && e[o], a); case 45: return s = t.sent, t.abrupt("return", s ? s.map(function (t) { return [o].concat(v(t)) }) : [[o]]); case 47: case "end": return t.stop() } }, t) }))).apply(this, arguments) } function x(t, e) { return e.reduce(function (t, e) { return t && t[e] }, t) } function g(t, e, r) { if (!e.length) return r; var n, o = b(e), a = o[0], i = o.slice(1), u = void 0 !== t && t[a], c = t; if (n = a, m.includes(n)) return t; if ("string" != typeof a || "object" === l(c) && !Array.isArray(c) ? "number" != typeof a || Array.isArray(c) || (c = []) : c = {}, "number" == typeof a) { var f = g(u, i, r); return void 0 === f ? void 0 === t ? t : (a in c && (c = v(c)).splice(a, 1), c) : d(f, u) ? t : ((c = v(c))[a] = f, c) } var s = g(u, i, r); return void 0 === s ? void 0 === t ? t : (a in c && delete (c = y({}, c))[a], c) : d(s, u) ? t : y(y({}, c), {}, p({}, a, s)) } return r });