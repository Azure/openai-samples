# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from insights_generator.models.base_model_ import Model
from insights_generator.models.data_sample import DataSample
from insights_generator import util


class AddDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch: List[DataSample] = None, urls: List[str] = None):
        """AddDataRequest - a model defined in OpenAPI

        :param batch: The batch of this AddDataRequest.
        :param urls: The urls of this AddDataRequest.
        """
        self.openapi_types = {'batch': List[DataSample], 'urls': List[str]}

        self.attribute_map = {'batch': 'batch', 'urls': 'urls'}

        self._batch = batch
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddDataRequest of this AddDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch(self):
        """Gets the batch of this AddDataRequest.


        :return: The batch of this AddDataRequest.
        :rtype: List[DataSample]
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this AddDataRequest.


        :param batch: The batch of this AddDataRequest.
        :type batch: List[DataSample]
        """

        self._batch = batch

    @property
    def urls(self):
        """Gets the urls of this AddDataRequest.


        :return: The urls of this AddDataRequest.
        :rtype: List[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this AddDataRequest.


        :param urls: The urls of this AddDataRequest.
        :type urls: List[str]
        """

        self._urls = urls
