# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from insights_generator.models.base_model_ import Model
from insights_generator import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self,
                 name: str = None,
                 source_urls: List[str] = None,
                 product_category: str = None,
                 product_name: str = None,
                 status: str = None,
                 created_at: datetime = None,
                 modified_at: datetime = None):
        """Project - a model defined in OpenAPI

        :param name: The name of this Project.
        :param source_urls: The source_urls of this Project.
        :param product_category: The product_category of this Project.
        :param product_name: The product_name of this Project.
        :param status: The status of this Project.
        :param created_at: The created_at of this Project.
        :param modified_at: The modified_at of this Project.
        """
        self.openapi_types = {
            'name': str,
            'source_urls': List[str],
            'product_category': str,
            'product_name': str,
            'status': str,
            'created_at': datetime,
            'modified_at': datetime
        }

        self.attribute_map = {
            'name': 'name',
            'source_urls': 'sourceUrls',
            'product_category': 'productCategory',
            'product_name': 'productName',
            'status': 'status',
            'created_at': 'createdAt',
            'modified_at': 'modifiedAt'
        }

        self._name = name
        self._source_urls = source_urls
        self._product_category = product_category
        self._product_name = product_name
        self._status = status
        self._created_at = created_at
        self._modified_at = modified_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Project.


        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def source_urls(self):
        """Gets the source_urls of this Project.


        :return: The source_urls of this Project.
        :rtype: List[str]
        """
        return self._source_urls

    @source_urls.setter
    def source_urls(self, source_urls):
        """Sets the source_urls of this Project.


        :param source_urls: The source_urls of this Project.
        :type source_urls: List[str]
        """

        self._source_urls = source_urls

    @property
    def product_category(self):
        """Gets the product_category of this Project.


        :return: The product_category of this Project.
        :rtype: str
        """
        return self._product_category

    @product_category.setter
    def product_category(self, product_category):
        """Sets the product_category of this Project.


        :param product_category: The product_category of this Project.
        :type product_category: str
        """

        self._product_category = product_category

    @property
    def product_name(self):
        """Gets the product_name of this Project.


        :return: The product_name of this Project.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this Project.


        :param product_name: The product_name of this Project.
        :type product_name: str
        """

        self._product_name = product_name

    @property
    def status(self):
        """Gets the status of this Project.

        project status in the store

        :return: The status of this Project.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Project.

        project status in the store

        :param status: The status of this Project.
        :type status: str
        """
        allowed_values = ["available", "pending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(
                    status, allowed_values))

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this Project.

        project creation datetime in utc

        :return: The created_at of this Project.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Project.

        project creation datetime in utc

        :param created_at: The created_at of this Project.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Project.

        project modified datetime in utc

        :return: The modified_at of this Project.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Project.

        project modified datetime in utc

        :param modified_at: The modified_at of this Project.
        :type modified_at: datetime
        """

        self._modified_at = modified_at
